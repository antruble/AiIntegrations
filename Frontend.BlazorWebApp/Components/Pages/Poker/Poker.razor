@page "/poker/game/{gameId:guid}"
@using Frontend.BlazorWebApp.Components.Pages.Poker.Components
@using Frontend.BlazorWebApp.StateServices
@using Frontend.BlazorWebApp.Engines
@using Backend.Shared.Models.Poker

@rendermode InteractiveServer


@inject GameStateService GameState
@inject IHttpClientFactory HttpFactory
@inject ILoggerFactory LoggerFactory
@inject ILogger<Poker> Logger
@inject NavigationManager NavManager

@if (GameState.IsFinished)
{
    <div class="finish-overlay d-flex flex-column justify-content-center align-items-center">
        <div class="finish-card p-4 text-center shadow-lg rounded">
            <h2 class="mb-3">Gratulálunk!</h2>
            <p class="lead">Sikeresen megnyerted a játszmát!</p>
            <button class="btn btn-primary mt-3" @onclick="() => NavigateBack()">
                Vissza a főoldalra
            </button>
        </div>
    </div>
}
else
{
    @if (isLoading) { <p class="text-center">Betöltés...</p> }
    else if (hasError) { <p class="text-center text-danger">Hiba történt a játék betöltése során.</p> }
    else if (_engine is null || GameState.CurrentGame is null) { <h1 class="text-center text-red">Nincs játék.</h1> }
    else if (GameState.CurrentGame.CurrentHand is null) { <h1 class="text-center text-red">Nincs hand.</h1> }
    else
    {
        @if (!string.IsNullOrEmpty(GameState.CurrentHint))
        {
            <div class="position-absolute top-0 start-0 w-100 d-flex justify-content-center">
                <div class="alert alert-info mt-2 w-50">
                    <strong>Hint:</strong> @GameState.CurrentHint
                </div>
            </div>
        }


        <div class="d-flex justify-content-center align-items-center flex-column relative" style="height: 100vh">
            <PokerTable
            CurrentGame="GameState.CurrentGame"
            UserId="_engine.GetUserId()"
            Winners="GameState.Winners"
            GetSuitSymbol="GetSuitSymbol" />

            @if (GameState.CurrentGame.CurrentGameAction == GameAction.PlayerAction
               && _engine.GetUserId() == GameState.CurrentGame.CurrentHand.CurrentPlayerId)
            {
                <div class="w-100 mt-5 d-flex justify-content-center" style="position: absolute; bottom:0; left; 0;">
                    <ActionToolbar
                    MaxRaise="MaxRaise"
                    CanRequestHint="CanRequestHint"
                    OnFold="() => Fold()"
                    OnCall="() => Call()"
                    OnRaise="amt => Raise(amt)" 
                    OnHint="() => HintAsync()"/>
                </div>
            }
        </div>
    }
}
@code {
    [Parameter]
    public Guid gameId { get; set; }

    private bool _engineStarted = false;
    private bool isLoading = true, hasError = false;
    private PokerGameEngine? _engine;
    private int MaxRaise => GameState.CurrentGame?
                             .Players?
                             .FirstOrDefault(p => p.Id == _engine?.GetUserId())?
                             .Chips ?? 0;

    public bool CanRequestHint => GameState.CurrentGame?.CurrentHand?.HandStatus == HandStatus.Preflop ? false : true;

    protected override async Task OnParametersSetAsync()
    {
        await LoadGame();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_engineStarted)
        {
            NavManager.LocationChanged += OnLocationChanged;
            GameState.OnChange += RefreshUI;
            await StartGameEngineAsync();
            _engineStarted = true;
        }
    }

    private void Fold() => _engine!.RecordPlayerAction(new PlayerActionDto(PlayerActionType.Fold, null, DateTime.UtcNow));
    private void Call() => _engine!.RecordPlayerAction(new PlayerActionDto(PlayerActionType.Call, null, DateTime.UtcNow));
    private void Raise(int amount) => _engine!.RecordPlayerAction(new PlayerActionDto(PlayerActionType.Raise, amount, DateTime.UtcNow));

    private async Task LoadGame()
    {
        try
        {
            var client = HttpFactory.CreateClient("PokerClient");
            var game = await client.GetFromJsonAsync<GameDto>($"getgamebyid/{gameId}");
            if (game == null)
            {
                throw new InvalidOperationException("Nem található a kért játék.");
            }

            // Frissítjük a GameState-et
            GameState.UpdateGame(game);
        }
        catch
        {
            await Task.Delay(1500);
            NavManager.NavigateTo("/poker");
        }
    }

    private async Task HintAsync()
    {
        if (_engine is null) return;

        // Előző hint törlése
        GameState.ClearHint();

        await _engine.RequestHintAsync();
    }

    private async Task StartGameEngineAsync()
    {
        var engineLogger = LoggerFactory.CreateLogger<PokerGameEngine>();
        if (GameState.CurrentGame is null)
        {
            await LoadGame();
        }
        _engine = new PokerGameEngine(GameState.CurrentGame!, HttpFactory, engineLogger, StateHasChanged, GameState);
        _engine.Start();
        isLoading = false;
    }
    private async void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        // Ha a user már nem ezen az útvonalon van:
        if (!args.Location.Contains("/poker/game", StringComparison.OrdinalIgnoreCase))
        {
            NavManager.LocationChanged -= OnLocationChanged;
            await StopAndDisposeEngineAsync();
        }
    }

    private async Task StopAndDisposeEngineAsync()
    {
        if (_engine is not null)
        {
            await _engine.StopAsync();
            _engine.Dispose();
            _engine = null;
        }
    }

    public void NavigateBack()
    {
        NavManager.NavigateTo("/poker");
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;
        GameState.OnChange -= RefreshUI;
    }

    private async void RefreshUI()
    {
        await InvokeAsync(StateHasChanged);
    }

    private string GetSuitSymbol(SuitDto suit) =>
        suit switch
        {
            SuitDto.Clubs => "♣",
            SuitDto.Diamonds => "♦",
            SuitDto.Hearts => "♥",
            SuitDto.Spades => "♠",
            _ => ""
        };
}
