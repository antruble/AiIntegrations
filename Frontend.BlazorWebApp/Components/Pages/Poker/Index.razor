@page "/poker"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using Frontend.BlazorWebApp.StateServices
@using Backend.Shared.Models.Poker
@rendermode InteractiveServer

@inject IHttpClientFactory HttpFactory
@inject NavigationManager NavManager

<style>
    /* A kártya méretezése és lekerekítése */
    .new-game-card {
    width: 100%;
    max-width: 400px;
    border: none;
    border-radius: 0.75rem;
    overflow: hidden;
    }

    /* Ugyanaz a gradiens, mint a layout headerében */
    .header-gradient {
    background-image: linear-gradient(315deg, #2d3436 0%, #3B3B3B 74%);
    padding: 1rem 1.5rem;
    }

    /* Form mezők nagyobb, lekerekített inputok */
    .form-control-lg {
    padding: 0.75rem 1rem;
    border-radius: 2rem;
    }

    /* Indító gomb extra padding és hover effekt */
    .btn-start {
    width: 100%;
    transition: background-color 0.2s ease, transform 0.1s ease;
    }

    .btn-start:hover:not(:disabled) {
    background-color: #2d3436;
    color: #fff;
    transform: translateY(-1px);
    }

    /* ValidationSummary és hibaszöveg finomhangolás */
    .validation-summary-valid ul {
    list-style-type: none;
    padding-left: 0;
    }

    .text-danger {
    font-size: 0.9rem;
    }

    /* Spinner és szöveg távolsága */
    .spinner-border {
    vertical-align: text-bottom;
    }

</style>

<div class="vh-100 m-0" style="padding-top: 10rem;">
    <div class="container d-flex justify-content-center ">
        <div class="card new-game-card shadow h-100 overflow-hidden">
            <div class="card-header header-gradient text-white text-center" style="border-radius: 0;">
                <h3 class="mb-0">Új póker játék indítása</h3>
            </div>

            <div class="card-body">
                <EditForm Model="model"
                OnValidSubmit="CreateGame"
                class="d-flex flex-column"
                FormName="newGameForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-4">
                        <label for="playerName" class="form-label small text-uppercase text-muted">
                            Játékos neve
                        </label>
                        <InputText id="playerName"
                        @bind-Value="model.PlayerName"
                        class="form-control form-control-lg rounded-pill" />
                    </div>

                    <div class="mb-4">
                        <label for="numBots" class="form-label small text-uppercase text-muted">
                            Botok száma
                        </label>
                        <InputNumber id="numBots"
                        @bind-Value="model.NumBots"
                        class="form-control form-control-lg rounded-pill"
                        min="1" />
                    </div>

                    <button type="submit"
                    class="btn btn-primary btn-start rounded-pill py-2 mt-2"
                    disabled="@isCreating">
                        @if (isCreating)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            <span>Indul...</span>
                        }
                        else
                        {
                            <span>Új játék indítása</span>
                        }
                    </button>

                    @if (!string.IsNullOrEmpty(error))
                    {
                        <div class="text-danger mt-3">@error</div>
                    }
                </EditForm>
            </div>
        </div>
    </div>
</div>
@code {
    private NewGameModel model = new();
    private bool isCreating;
    private string? error;

    private async Task CreateGame()
    {
        isCreating = true;
        error = null;

        try
        {
            var client = HttpFactory.CreateClient("PokerClient");

            var request = new CreateGameRequest
            {
                NumOfBots = model.NumBots,
                PlayerName = model.PlayerName
            };

            var response = await client.PostAsJsonAsync("newgame", request);
            response.EnsureSuccessStatusCode();

            var gameId = await response.Content.ReadFromJsonAsync<Guid>();

            NavManager.NavigateTo($"/poker/game/{gameId}");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isCreating = false;
        }
    }

    public class NewGameModel
    {
        [Required]
        public string PlayerName { get; set; } = "Player";

        [Range(1, 10, ErrorMessage = "Legalább 1 bot kell.")]
        public int NumBots { get; set; } = 5;
    }
}
