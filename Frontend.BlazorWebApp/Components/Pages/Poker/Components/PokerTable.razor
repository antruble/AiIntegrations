@using Backend.Shared.Models.Poker

@rendermode InteractiveServer

@if (CurrentGame.CurrentHand is not null)
{
    <div class="container">
        <div class="poker-table position-relative mx-auto mt-4">

            

            <CommunityCards Cards="CurrentGame.CurrentHand?.CommunityCards" GetSuitSymbol="GetSuitSymbol" />
            <div class="position-absolute start-50 bottom-0">
                <div class="pot-display  translate-middle-x bg-light border rounded-pill shadow-sm px-3 py-1 text-center" style="bottom: 2rem;">
                    <strong>Pot:</strong> @CurrentGame.CurrentHand!.Pot.MainPot
                </div>

                <div class="seat-dealer text-center my-3">
                    <span class="badge bg-secondary">Dealer</span>
                </div>
            </div>
            @foreach (var player in CurrentGame.Players)
            {
                <PlayerSeat Player="player"
                            UserId="UserId"
                            CurrentGameAction="CurrentGame.CurrentGameAction"
                            CurrentPlayerId="CurrentGame.CurrentHand!.CurrentPlayerId"
                            PivotPlayerId="CurrentGame.CurrentHand?.PivotPlayerId"
                            Winners="Winners"
                            GetSuitSymbol="GetSuitSymbol" />
            }
        </div>
    </div>
}
@code {
    [Parameter, EditorRequired]
    public GameDto CurrentGame { get; set; } = default!;

    [Parameter, EditorRequired]
    public Guid UserId { get; set; }

    [Parameter]
    public IEnumerable<WinnerDto>? Winners { get; set; }

    [Parameter, EditorRequired]
    public Func<SuitDto, string> GetSuitSymbol { get; set; } = _ => string.Empty;
}
