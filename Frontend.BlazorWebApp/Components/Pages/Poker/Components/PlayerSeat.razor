@using Backend.Shared.Models.Poker
@rendermode InteractiveServer

<div class="player-seat seat-@Player.Seat 
    @(Player.PlayerStatus == PlayerStatus.Folded ? "folded" : "")
    @(CurrentGameAction == GameAction.PlayerAction && CurrentPlayerId == Player.Id ? "selected" : "" )
    @(Winners is not null && Winners.Any(w => w.PlayerId == Player.Id) ? "winner" : "" )
    ">
    

    @* Pivot dealer jelzés *@
    @if (Player.Id == PivotPlayerId)
    {
        <div class="pivot-badge">D</div>
    }

    @* Vakokat itt, kívül lebegve jelöljük *@
    @if (Player.BlindStatus != BlindStatus.None)
    {
        <div class="blind-badge @(Player.BlindStatus == BlindStatus.SmallBlind ? "small-blind" : "big-blind")">
            @(Player.BlindStatus == BlindStatus.SmallBlind ? "SB" : "BB")
        </div>
    }

    @* Játékos neve és zsetonjai *@
    <div class="player-name mb-4 text-white">@Player.Name</div>
    <div class="chip-stack">@Player.Chips</div>

    @if (Player.PlayerStatus != PlayerStatus.Folded)
    {
        <div class="player-cards">
            @if (CurrentGameAction == GameAction.ShowOff
         || Player.Id == UserId
         || Player.HasToRevealCards)
            {
                @foreach (var card in Player.HoleCards)
                {
                    <div class="card @(card.Suit.ToString().ToLower())">
                        <div class="rank">@card.DisplayValue</div>
                        <div class="suit">@GetSuitSymbol(card.Suit)</div>
                    </div>
                }
            }
            else
            {
                @for (int i = 0; i < 2; i++)
                {
                    <div class="card back"></div>
                }
            }
        </div>
        <div style="position: absolute; bottom: -3.5rem;">
            @if (Player.LastAction is { } act)
            {
                <ActionBadge Action="act" />
            }
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public PlayerDto Player { get; set; } = default!;

    [Parameter, EditorRequired]
    public GameAction CurrentGameAction { get; set; }

    [Parameter, EditorRequired]
    public Guid UserId { get; set; }

    [Parameter]
    public Guid? PivotPlayerId { get; set; }

    [Parameter]
    public IEnumerable<WinnerDto>? Winners { get; set; }

    [Parameter, EditorRequired]
    public Func<SuitDto, string> GetSuitSymbol { get; set; } = _ => string.Empty;

    private HashSet<DateTime> shownActions = new();

    private string CssClasses
    {
        get
        {
            var css = string.Empty;
            if (CurrentGameAction == GameAction.ShowOff
                && Winners?.Any(w => w.PlayerId == Player.Id) == true)
            {
                css += "bg-warning ";
            }
            if (CurrentGameAction == GameAction.PlayerAction
                && Player.Id == CurrentPlayerId)
            {
                css += "border border-primary bg-success ";
            }
            return css;
        }
    }

    [Parameter]
    public Guid CurrentPlayerId { get; set; }
}
