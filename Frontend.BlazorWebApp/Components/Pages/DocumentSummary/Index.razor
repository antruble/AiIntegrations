@page "/documentsummary/"
@rendermode InteractiveServer

@using Backend.Shared.Models.DocumentSummary
@using Frontend.BlazorWebApp.Components.Pages.DocumentSummary.Components

@inject IHttpClientFactory HttpFactory

<div class="container bg-white vh-100 align-items-center flex-column">
    <header class="w-100 d-flex justify-content-center pt-2">
        <div class="px-4" style="border-bottom: 1px solid #C5C5C5">
            <h3 class="text-center">Dokumentum összefoglalása AI segítségével</h3>
        </div>
    </header>
    @if (showUploadModal)
    {
        <FileUploadModal SelectedFile="selectedFile"
                         SelectedFileChanged="f => selectedFile = f"
                         AvailableStyles="availableStyles"
                         SelectedStyle="selectedStyle"
                         SelectedStyleChanged="s => selectedStyle = s"
                         OnUploadClicked="StartUpload"
                         OnCancel="() => showUploadModal = false" />
    }
    else if (isProcessing)
    {
        <ProcessingSpinner />
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-4">
            @errorMessage
            <div class="mt-3">
                <button class="btn btn-secondary" @onclick="() => { errorMessage = null; showUploadModal = true; }">
                    Új próbálkozás
                </button>
            </div>
        </div>
    }
    else if (aiResponse != null)
    {
        <DocumentSummaryDisplay Response="aiResponse"
                                RenderedStyle="@renderedStyle"
                                OnNewUpload="() => showUploadModal = true" />
    }
</div>

@code {
    private bool showUploadModal = true;
    private bool isProcessing = false;
    private string? errorMessage = null;
    private DocumentSummaryApiResult? aiResponse;

    private readonly string[] availableStyles = { "academic", "practical", "simple" };
    private string selectedStyle = "academic";
    private string renderedStyle = "academic";

    private IBrowserFile? selectedFile;
    private HttpClient? _http;

    protected override void OnInitialized()
    {
        _http = HttpFactory.CreateClient("DocumentSummaryClient");
    }

    private async Task StartUpload()
    {
        if (selectedFile == null) return;

        showUploadModal = false;
        isProcessing = true;

        try
        {
            var content = new MultipartFormDataContent 
            {
                { 
                    new StreamContent(selectedFile.OpenReadStream(15 * 1024 * 1024))
                    { 
                        Headers = { ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType) } 
                    },
                    "file", 
                    selectedFile.Name 
                },
                { 
                    new StringContent(selectedStyle), "style" 
                }
            };

            var resp = await _http!.PostAsync("upload", content);
            if (resp.IsSuccessStatusCode)
            {
                aiResponse = await resp.Content.ReadFromJsonAsync<DocumentSummaryApiResult>();
                renderedStyle = selectedStyle;
            }
            else
            {
                var serverMsg = await resp.Content.ReadAsStringAsync();
                errorMessage = !string.IsNullOrWhiteSpace(serverMsg)
                                 ? serverMsg
                                 : "Ismeretlen hiba történt a feltöltés során.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Hiba történt: {ex.Message}";
            Console.Error.WriteLine($"Hiba történt: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }
}